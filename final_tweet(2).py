# -*- coding: utf-8 -*-
"""final_tweet(2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19odeFNOo7GAM65wT2kpiR8XBn0tdhhvS
"""

!pip install stop_words

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import re
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras import regularizers
from keras.layers import LSTM, Activation, Dense, Dropout, Embedding, Input, GRU, BatchNormalization, Bidirectional
from keras.optimizers import Adam
from keras.preprocessing.text import Tokenizer
from keras.preprocessing import sequence
from tensorflow.keras.utils import to_categorical
from keras.callbacks import EarlyStopping
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
from stop_words import get_stop_words
import pkg_resources
# %matplotlib inline

from google.colab import drive
drive.mount('/content/drive')

df=pd.read_csv(r"/content/drive/MyDrive/data/paper_train.csv")
df.head

sns.countplot(df.label)
plt.xlabel('type of article')
plt.ylabel('no of articles')
plt.title('Articles')

from sklearn.preprocessing import LabelEncoder
X=df.Tweet
Y=df.label
le=LabelEncoder()
Y=le.fit_transform(Y)
Y=Y.reshape(-1,1)

import nltk
nltk.download('wordnet')

stopwords=set(get_stop_words('en'))

def clean(text):
  """
    Function that does basic cleaning
  """
  text=text.lower()
  text=re.sub(r"http\S+",' ',text)
  text=re.sub(r'\s',' ',text)
  text=re.sub(r'\(.*?\)', ' ',text)
  text=re.sub(r'\{.*?\}', ' ',text)
  text=re.sub(r'\w*\d\w*',' ',text)
  text=re.sub(r'\W+',r' ',text)
  return text

def remove_stopwords(text):
  """
    Function that removes stopwords from tweet
  """
  word_list=text.split()
  word_list_new=[word for word in word_list if word not in stopwords]
  text_new=' '.join(word_list_new)
  return text_new

def get_lemmatized(text):
  """
    Function that performs lemetization
  """
  lemmatizer = WordNetLemmatizer()
  text_lem=' '.join([lemmatizer.lemmatize(word) for word in text.split()]) 
  return text_lem

X=X.apply(lambda x: clean(str(x)))

X

X=X.apply(lambda x: remove_stopwords(str(x)))

X

X=X.apply(lambda x: get_lemmatized(str(x)))

X

count=[str(x).split() for x in X]
words=[len(x) for x in count]
max_len=max(words)
print(max_len)

para=''
wordlist=[]
for x in X:
    small=str(x)
    para+=small
wordlist=para.split()
words_count=len(set(wordlist))
print(words_count)

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.15)

max_words=27500
max_len=60
tok=Tokenizer(num_words=max_words)
tok.fit_on_texts(X_train)
sequences=tok.texts_to_sequences(X_train)
sequences_matrix=sequence.pad_sequences(sequences,maxlen=max_len)

print(sequences)

sequences_matrix.shape

test_sequences = tok.texts_to_sequences(X_test)
test_sequences_matrix = sequence.pad_sequences(test_sequences,maxlen=max_len)

path_to_glove_file = r"/content/drive/MyDrive/topicmodelling/glove.6B.100d.txt"

embeddings_index = {}
with open(path_to_glove_file,encoding='utf-8') as f:
    for line in f:
        word, coefs = line.split(maxsplit=1)
        coefs = np.fromstring(coefs, "f", sep=" ")
        embeddings_index[word] = coefs

print("Found %s word vectors." % len(embeddings_index))

embedding_dim = 100 
hits = 0
misses = 0

# Prepare embedding matrix
embedding_matrix = np.zeros(((len(tok.word_index) + 1, embedding_dim)))
for word, i in tok.word_index.items():
    embedding_vector = embeddings_index.get(word)
    if embedding_vector is not None:
        # Words not found in embedding index will be all-zeros.
        # This includes the representation for "padding" and "OOV"
        embedding_matrix[i] = embedding_vector
        hits += 1
    else:
        misses += 1
print("Converted %d words (%d misses)" % (hits, misses))

def mymodel():
  model=Sequential()
  model.add(Embedding(*embedding_matrix.shape, weights=[embedding_matrix], trainable=False))
  model.add(LSTM(16))
  model.add(Dense(16,kernel_regularizer=regularizers.l1(),activation ='tanh'))
  model.add(BatchNormalization())
  model.add(Dropout(0.5))
  model.add(Dense(4,kernel_regularizer=regularizers.l1(), activation='softmax'))
  return model

model=mymodel()
 model.compile(loss='sparse_categorical_crossentropy',optimizer=Adam(),metrics=['accuracy'])
 model.summary()

model.fit(sequences_matrix,Y_train,batch_size=16,epochs=100,
          validation_split=0.2,callbacks=[EarlyStopping(monitor='val_loss',min_delta=0.00001)])

accr=model.evaluate(test_sequences_matrix,Y_test)

print(f'Test accuracy : {accr[1]:.4f} \nTest loss : {accr[0]:.4f}')

trial="""Get a sneak preview of the 2022 World Cup at this year's"""

trial=clean(trial)

print(trial)

trial=remove_stopwords(trial)

print(trial)

trial=get_lemmatized(trial)

print(trial)

trial_sequences = tok.texts_to_sequences([trial])
# trial_sequences_matrix = sequence.pad_sequences([trial_sequences],maxlen=max_len)

pred=model.predict(trial_sequences)

print(pred)

p=np.argmax([pred])

print(p)

print(le.inverse_transform([p]))

